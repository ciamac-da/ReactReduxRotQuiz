{"version":3,"sources":["Question.js","QuestionSet.js","Categories.js","serviceWorker.js","index.js","App.js"],"names":["heart","color","AnswerStyle","Question","question","correct","answers","chosen","select","nextQuestion","classes","className","map","answer","index","key","style","Checkbox","onChange","checked","icon","checkedIcon","Button","variant","onClick","e","wasAnsweredCorrectly","reduce","isCorrect","value","QuestionSet","category","questions","reset","useState","count","points","finished","state","setState","MyFont","fontFamily","backgroundColor","point","random","Math","floor","length","record","splice","slice","sort","a","b","indexOf","copycat","target","Categories","categories","Object","keys","allQuestions","margin","fontSize","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uqhBAwBMA,EAAQ,CACZC,MAAO,SAIHC,EAAc,CAClBD,MAAO,SAWM,SAASE,EAAT,GAEX,IADFC,EACC,EADDA,SAAUC,EACT,EADSA,QAASC,EAClB,EADkBA,QAASC,EAC3B,EAD2BA,OAAQC,EACnC,EADmCA,OAAQC,EAC3C,EAD2CA,aAC3C,EADyDC,QAE1D,OAEE,yBACEC,UAAU,OACV,4BAAKP,GACJE,EAAQM,KACP,SAACC,EAAQC,GAAT,OACE,yBAAKC,IAAKD,EAAOH,UAAU,SAASK,MAAOd,GACzC,kBAACe,EAAA,EAAD,CACEC,SAAUV,EAAOM,GACjBK,QAASZ,EAAOO,GAChBM,KAAM,kBAAC,IAAD,CAAgBJ,MAAOhB,IAC7BqB,YAAa,kBAAC,IAAD,CAAUL,MAAOd,MALlC,IAMMW,MAIV,kBAACS,EAAA,EAAD,CAASC,QAAQ,YAAYtB,MAAM,WAAWuB,QAC5C,SAAAC,GACE,IAAMC,EAAuBnB,EAAOoB,QAClC,SAACC,EAAWC,EAAOf,GACjB,QAAKc,MACS,IAAVC,GAAmBf,IAAUT,MACnB,IAAVwB,GAAkBf,IAAUT,OAGhC,GACJI,EAAaiB,EAAuB,EAAI,KAV5C,OAaE,kBAAC,IAAD,QCxDO,SAASI,EAAT,GAAiD,EAA3BC,SAA4B,IAAnBC,EAAkB,EAAlBA,UAAUC,EAAQ,EAARA,MAAQ,EAErCC,mBAAS,CAChCC,OAAO,EACPC,OAAO,EACPJ,YACA5B,SAAS,KACTE,QAAQ,KACRD,QAAQ,KACRE,OAAO,KACP8B,UAAS,IAVmD,mBAEvDC,EAFuD,KAEjDC,EAFiD,KAaxDC,EAAS,CACfC,WAAY,sBAIJN,EAAsDG,EAAtDH,MAAOC,EAA+CE,EAA/CF,OAAQhC,EAAuCkC,EAAvClC,SAAUC,EAA6BiC,EAA7BjC,QAASC,EAAoBgC,EAApBhC,QAASC,EAAW+B,EAAX/B,OAKnD,GAAK+B,EAAMD,SACT,OAAS,yBAAK1B,UAAU,WACtB,wBAAIK,MAAOwB,GAAX,sBAAsC,6BAGtC,kBAAC,IAAD,OAGA,wBAAIxB,MAAOwB,GAAX,SAA0BJ,EAA1B,OAAsCD,EAAtC,KACA,kBAACb,EAAA,EAAD,CAAQE,QAASS,EAAOjB,MAAO,CAAC0B,gBAAgB,QAASD,WAAY,uBAArE,YAIC,kBAAC,IAAD,QAOL,SAAShC,IAAsB,IAATkC,EAAQ,uDAAF,EAEpBC,EAASC,KAAKC,MAAOD,KAAKD,SAAWZ,EAAUe,QAE/CC,EAAShB,EAAUiB,OAAOL,EAAO,GAAG,GAE1C,GAAOI,EAAP,CAIA,IAAM5C,EAAW4C,EAAO,GACjB1C,EAAU0C,EAAOE,MAAM,GACvB7C,EAAUC,EAAQ,GASlBD,GARAC,EAAUA,EAAQ6C,MAAM,SAACC,EAAEC,GAAH,OAAQR,KAAKD,SAAS,OAQ5BU,QAAQjD,GAEjC,IAAQE,EAASD,EAAQM,KAAK,kBAAK,KACnC2B,EAAS,eACJD,EADG,CAENlC,WAAUC,UAASC,UAASC,SAC5B4B,MAAQG,EAAMH,MAAQ,EACtBC,OAAQE,EAAMF,OAASO,UArBvBJ,EAAS,eAAID,EAAL,CAAWD,UAAS,KAyChC,OALsB,IAAjBC,EAAMH,OACT1B,IAKA,yBAAKE,UAAU,QACK,IAAjB2B,EAAMH,MAAe,KAArB,mBAAwCG,EAAMH,MAA9C,uBAAkEG,EAAMF,QACzE,kBAACjC,EAAD,CACEC,SAAUA,EACVC,QAASA,EACTC,QAASA,EACTC,OAAQA,EACRC,OArBS,SAAAM,GAAK,OAAI,SAAAW,GACtB,IAAI8B,EAAO,YAAOjB,EAAM/B,QACxBgD,EAAQzC,GAASW,EAAE+B,OAAOrC,QAC1BoB,EAAS,eAAID,EAAL,CAAW/B,OAAOgD,OAmBtB9C,aAAcA,KCpGP,SAASgD,IAGtB,IAAMC,EAAaC,OAAOC,KAAKC,GAHG,EAOT3B,mBAAS,CAChCH,SAAS,OARuB,mBAO3BO,EAP2B,KAOrBC,EAPqB,KAa3BR,EAAYO,EAAZP,SAOP,OAAIA,EAAiB,kBAACD,EAAD,CACnBC,SAAUA,EACVC,UAAW6B,EAAa9B,GACxBE,MANY,SAAAR,GAAC,OAAIc,EAAS,CAACR,SAAS,UAWtC,yBAAKpB,UAAU,cACZ+C,EAAW9C,KAAK,SAACmB,EAASjB,GAAV,OACf,kBAACQ,EAAA,EAAD,CAAQN,MAAO,CAAEyB,WAAY,qBAAuBqB,OAAO,MAC3DC,SAAS,OAAS9D,MAAM,QAAU+D,WAAW,UAC5CjD,IAAKD,EAAOU,QAAU,SAAAC,GAErBc,EAAS,CAACR,eACRA,OCzCUkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WACb,OAAO,kBAACd,EAAD,QDDO,MAASe,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eef860d4.chunk.js","sourcesContent":["\nimport React from 'react';\n// to import Checkbox from material-ui!!!\nimport Checkbox from '@material-ui/core/Checkbox';\n// to import Button from material-ui!!!\n// So we need it because of next Button\nimport Button from '@material-ui/core/Button';\n// to import Favorite from materal-ui!!!\nimport Favorite from '@material-ui/icons/Favorite';\n// to import FavBorder from materail-ui!!!\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n//Style\n\n\n//\n/*\n  Die [Question] Komponente stellt eine Frage und alle antworten dar\n\n  Sie wird über [props] mit der Frage, allen Antworten und dem Index der\n  richtigen Antwork versorgt. Wenn der Spieler [Next] drückt,\n  werden die Antworten ausgwertet und [nextQuestion] aus der [QuestionSet]\n  Komponente aufgerufen.\n */\nconst heart = {\n  color: \"black\"\n}\n\n\nconst AnswerStyle = {\n  color: \"white\",\n}\n\n// Step by step!!!\n// 1st : question! \n// 2nd : correct!\n// 3rd : answers! \n// 4th : chosen!\n// 5th : select!\n// 6th : nextQuestion\n// 7th : classes!!!\nexport default function Question({\n  question, correct, answers, chosen, select, nextQuestion, classes\n}) {\n  return (\n\n    <div\n      className=\"Cia\">\n      <h1>{question}</h1>\n      {answers.map(\n        (answer, index) => (\n          <div key={index} className=\"answer\" style={AnswerStyle}>\n            <Checkbox\n              onChange={select(index)}\n              checked={chosen[index]}\n              icon={<FavoriteBorder style={heart} />}\n              checkedIcon={<Favorite style={AnswerStyle} />}\n            /> {answer}\n          </div>)\n      )}\n\n      <Button  variant=\"contained\" color=\"disabled\" onClick={\n        e => {\n          const wasAnsweredCorrectly = chosen.reduce(\n            (isCorrect, value, index) => {\n              if (!isCorrect) return false; // wenn eine Antwort falsch ist ist die Frage immer falsch beantwortet\n              if (value === false && index === correct) return false; // Wenn der Benuter nein gesag hat aber die antwor ist richtig\n              if (value === true && index !== correct) return false; // Wenn der Benutzer ja gesagt hat aber die Antwort ist falsch\n              return true;\n            }\n            , true);\n          nextQuestion(wasAnsweredCorrectly ? 1 : 0);\n        }}>\n        Next\n        <NavigateNextIcon/>\n      </Button>\n    </div>\n\n  )\n}\n// I already did it as I difinded Question function!!!","import React, { useState } from 'react';\nimport Button    from '@material-ui/core/Button';\nimport AccessibilityNewIcon from '@material-ui/icons/AccessibilityNew';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Question  from './Question';\n\n/*\n  Die [QuestionSet] Komponente bekommt den Namen der Kategorie,\n  sowie die list aller Fragen/Anworten als props.\n\n  Sie geht durch alle Fragen durch, und stellt diese mit der [Question]\n  Komponente dar. Ausserdem ist siie für das zählen der Punkte zuständig.\n\n  Ist man am Ende der Fragen angekommen wird eine zusammenfassung dargestell.\n   - Der [button] ist mit der [reset] Funktion aus der [Categories] Komponente\n     verbunden.\n*/\n\nexport default function QuestionSet({category,questions,reset}) {\n\n  const [state,setState] = useState({\n    count:-1,      // Anzahl der beantworteten Fragen\n    points:0,      // gesammelte Punkte\n    questions,     // (Array) mit allen Fragen, kommt aus [props]\n    question:null, // Aktuelle frage (String)\n    answers:null,  // (Array[mit Strings]) der alle Antworten enthält\n    correct:null,  // Index (Number) der richtigen Antwort\n    chosen:null,   // (Array[mit Booleans]) der die angeklickten Felder darstellt\n    finished:false // Ist das Set beendet?\n  });\n\n  const MyFont = {\n  fontFamily: \"'Oxanium', cursive\"\n\n  }\n  // Destrukturiere die wichtigsten State-Werte in lokale Konstanten.\n  const { count, points, question, correct, answers, chosen } = state;\n\n  // Wenn das Set beendet wurde, stelle das Endergebnis dar und lasse\n  // den Spieler zurück zu [Categories] wenn er den Button anklickt\n  //   die [reset] Funktion kommt über [props] aus der [Categories] Komponente.\n  if ( state.finished ){\n    return ( <div className=\"endGame\">\n      <h1 style={MyFont}>You made it buddy! <br/>\n\n        \n      <EmojiEmotionsIcon/> \n      \n      </h1>\n      <h2 style={MyFont}>Score {points} of {count} </h2>\n      <Button onClick={reset} style={{backgroundColor:\"white\", fontFamily: \"'Oxanium', cursive\",\n      }}>\n        Done\n       &nbsp;\n       <AccessibilityNewIcon/> \n        </Button>\n    </div> )\n  }\n\n  // Die [nextQuestion] Funktion liest die Frage und Antworten aus dem aktuellen\n  //   Datensatz und mischt die Antworten (normal ist die erste Antwort korrekt)\n  function nextQuestion(point=0){\n    // Generiert eine Zufallszahl von 0 bis [questions] Länge\n    const random = Math.floor( Math.random() * questions.length );\n    // Extrahiert den Datensatz aus dem [questions](Array)\n    const record = questions.splice(random,1)[0];\n    // Wenn keinen [record] mehr gibt ist das Set beendet.\n    if ( ! record ){\n      setState({...state,finished:true})\n      return\n    }\n    const question = record[0]; // Das erste Element im Daten\n    let    answers = record.slice(1); // Die antworten sind alles ab Index 1\n    let    correct = answers[0]; // Merken uns die richtige Antwort (String)\n           answers = answers.sort( (a,b)=> Math.random()-.5 ) // Mische die Karten\n           // Math.random() gibt eine Zahl zwischen 0 und 1\n           //   - minus 0.5 gibt da eine Zahl von -0.5 bis 0.5\n           //   - if not then its not between 0 & 1\n           //   - sort erwartet eine positive oder negative Zahl\n           //   - das ergebnis ist ein gemsichter array\n\n    // Finde den Index(Number) der rictigen antwort\n           correct = answers.indexOf(correct);\n    // Erzeuge den [chosen](Array) mit allen weren auf (false)\n    const   chosen = answers.map( ()=> false );\n    setState({\n      ...state,                   // Nehme den alten State mit\n      question, correct, answers, chosen, // und setze alle Felder mit Änderungen\n      count:  state.count + 1,     // Anzahl der Fragen erhöhen\n      points: state.points + point // Addiere Punkte wenn es welche gab\n    });\n  }\n\n  // Wend er Spieler eine Antwort anklich ändere den State\n  // die ist ein Callback generator wenn man die funtion mit [index]\n  // aufruft bekommt man einen individuellen Event-Handler zurück\n  const select = index => e => {\n    let copycat = [...state.chosen];\n    copycat[index] = e.target.checked;\n    setState({...state,chosen:copycat});\n  }\n\n  // Beim ersten laden der Komponente (count ist -1)\n  // rufe die [nextQuestion] Funktion auf um eine Frage zu ziehen\n  if ( state.count === -1 ){\n    nextQuestion()\n  }\n\n  \n  return (\n    <div className=\"App\">\n      {state.count === -1 ? null : `Question:${state.count}  /  Points:${state.points}`}\n      <Question\n        question={question}\n        correct={correct}\n        answers={answers}\n        chosen={chosen}\n        select={select}\n        nextQuestion={nextQuestion}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport Button       from '@material-ui/core/Button';\nimport allQuestions from './questions.json'\n\nimport QuestionSet  from './QuestionSet'\n\n/*\n    Categories ist die Hauptkomponente unserer QuizApp\n\n    Hier kann der Spieler eine der Kategorien auswählen,\n    diese Auswahl wird in [state.category] gespeichert.\n\n    a. Ist [state.category] === null wird die Auswahl angezeigt\n    b. Ansonsten wird die [QuestionSet] Komponente dargestellt,\n         diese wird mit den props [questions] und [category] versorgt.\n*/\n\nexport default function Categories(){\n  // Array mit den namen (String) aller Kategorien\n  //   - Object.keys gibt uns alle Schüssel in einem Objekt zurück\n  const categories = Object.keys(allQuestions);\n\n  // Der state unserer Komponente, hier gibt es nur einen Schüssel,\n  //   der Name unserer Kategorie\n  const [state,setState] = useState({\n    category:null\n  });\n\n  // Lese den Schüssel [category] aus dem state in eine Konstante\n  //   (destrukturierung)\n  const {category} = state;\n\n  // Die [reset] Funktion setzt category auf null zurück um wieder die\n  //   Liste aller Kategorien anzuzeigen\n  const reset = e => setState({category:null});\n\n  // Wenn [category] nicht null ist, zeige die QuestionSet Komponente\n  if (category) return <QuestionSet\n    category={category}\n    questions={allQuestions[category]}\n    reset={reset}\n  />\n\n  // Ansonsten zeige die Liste aller Kategorien\n  return (\n  <div className=\"categories\">\n    {categories.map( (category,index) =>\n      <Button style={{ fontFamily: \"'Oxanium', cursive\" , margin:\"1ch\" , \n      fontSize:\"1rem\" , color:\"white\" , fontWeight:\"bolder\"}}\n       key={index} onClick={ e => {\n        // Setze [category] auf die angeklickte Kategorie\n        setState({category});\n      }}>{category} \n      </Button> )}\n  </div> )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","\nimport './App.css';\n\nimport React       from 'react';\nimport Categories  from './Categories'\n\nexport default function App(){\n  return <Categories/>\n}\n"],"sourceRoot":""}